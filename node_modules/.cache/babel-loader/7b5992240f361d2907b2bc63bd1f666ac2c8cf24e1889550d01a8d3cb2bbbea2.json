{"ast":null,"code":"const timeOffsets = {\n  social: 30,\n  workshop: 21,\n  competition: 60\n};\nconst CALENDAR_ID = \"1e79b55343290be5c7bf935f61f48f8906b1e91d26116edc26b9ebbfe16d6cf8@group.calendar.google.com\";\nconst API_KEY = \"AIzaSyA40eo7r7qepeP-wHgbFz4c4TUq_dNkydk\";\nfunction getEventType(description = \"\") {\n  if (description.includes(\"#tag: workshop\")) return \"workshop\";\n  if (description.includes(\"#tag: competition\")) return \"competition\";\n  if (description.includes(\"#tag: social\")) return \"social\";\n  return null;\n}\nconst fetchEvents = async (past = false) => {\n  const now = new Date();\n  const rangeStart = new Date(now);\n  const rangeEnd = new Date(now);\n\n  // Use the largest offset to fetch all possible events, then filter\n  const maxOffset = Math.max(...Object.values(timeOffsets));\n  if (past) {\n    rangeStart.setDate(now.getDate() - maxOffset);\n    rangeEnd.setDate(now.getDate());\n  } else {\n    rangeStart.setDate(now.getDate());\n    rangeEnd.setDate(now.getDate() + maxOffset);\n  }\n  const timeMin = rangeStart.toISOString();\n  const timeMax = rangeEnd.toISOString();\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}&timeMin=${timeMin}&timeMax=${timeMax}&singleEvents=true&orderBy=startTime`;\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    let events = data.items || [];\n\n    // Filter events by tag and time window\n    events = events.filter(event => {\n      const type = getEventType(event.description || \"\");\n      if (!type) return false;\n      const eventDate = new Date(event.start.dateTime || event.start.date);\n      const offset = timeOffsets[type];\n      if (past) {\n        const minDate = new Date(now);\n        minDate.setDate(now.getDate() - offset);\n        return eventDate >= minDate && eventDate < now;\n      } else {\n        const maxDate = new Date(now);\n        maxDate.setDate(now.getDate() + offset);\n        return eventDate >= now && eventDate <= maxDate;\n      }\n    });\n\n    // Sort events\n    events.sort((a, b) => {\n      const dateA = new Date(a.start.dateTime || a.start.date).getTime();\n      const dateB = new Date(b.start.dateTime || b.start.date).getTime();\n      return past ? dateB - dateA : dateA - dateB;\n    });\n    return events;\n  } catch (error) {\n    console.error(\"Error fetching events:\", error);\n    return [];\n  }\n};\nexport default fetchEvents;","map":{"version":3,"names":["timeOffsets","social","workshop","competition","CALENDAR_ID","API_KEY","getEventType","description","includes","fetchEvents","past","now","Date","rangeStart","rangeEnd","maxOffset","Math","max","Object","values","setDate","getDate","timeMin","toISOString","timeMax","url","response","fetch","data","json","events","items","filter","event","type","eventDate","start","dateTime","date","offset","minDate","maxDate","sort","a","b","dateA","getTime","dateB","error","console"],"sources":["/home/everett/acm-website/src/components/fetchEvents.js"],"sourcesContent":["const timeOffsets = {\n  social: 30,\n  workshop: 21,\n  competition: 60,\n};\n\nconst CALENDAR_ID = \"1e79b55343290be5c7bf935f61f48f8906b1e91d26116edc26b9ebbfe16d6cf8@group.calendar.google.com\";\nconst API_KEY = \"AIzaSyA40eo7r7qepeP-wHgbFz4c4TUq_dNkydk\";\n\nfunction getEventType(description = \"\") {\n  if (description.includes(\"#tag: workshop\")) return \"workshop\";\n  if (description.includes(\"#tag: competition\")) return \"competition\";\n  if (description.includes(\"#tag: social\")) return \"social\";\n  return null;\n}\n\nconst fetchEvents = async (past = false) => {\n  const now = new Date();\n  const rangeStart = new Date(now);\n  const rangeEnd = new Date(now);\n\n  // Use the largest offset to fetch all possible events, then filter\n  const maxOffset = Math.max(...Object.values(timeOffsets));\n  if (past) {\n    rangeStart.setDate(now.getDate() - maxOffset);\n    rangeEnd.setDate(now.getDate());\n  } else {\n    rangeStart.setDate(now.getDate());\n    rangeEnd.setDate(now.getDate() + maxOffset);\n  }\n\n  const timeMin = rangeStart.toISOString();\n  const timeMax = rangeEnd.toISOString();\n\n  const url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}&timeMin=${timeMin}&timeMax=${timeMax}&singleEvents=true&orderBy=startTime`;\n\n  try {\n    const response = await fetch(url);\n    const data = await response.json();\n    let events = data.items || [];\n\n    // Filter events by tag and time window\n    events = events.filter(event => {\n      const type = getEventType(event.description || \"\");\n      if (!type) return false;\n\n      const eventDate = new Date(event.start.dateTime || event.start.date);\n      const offset = timeOffsets[type];\n\n      if (past) {\n        const minDate = new Date(now);\n        minDate.setDate(now.getDate() - offset);\n        return eventDate >= minDate && eventDate < now;\n      } else {\n        const maxDate = new Date(now);\n        maxDate.setDate(now.getDate() + offset);\n        return eventDate >= now && eventDate <= maxDate;\n      }\n    });\n\n    // Sort events\n    events.sort((a, b) => {\n      const dateA = new Date(a.start.dateTime || a.start.date).getTime();\n      const dateB = new Date(b.start.dateTime || b.start.date).getTime();\n      return past ? dateB - dateA : dateA - dateB;\n    });\n\n    return events;\n  } catch (error) {\n    console.error(\"Error fetching events:\", error);\n    return [];\n  }\n};\n\nexport default fetchEvents;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}