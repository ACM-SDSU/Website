{"ast":null,"code":"const fetchEvents = async (past = false) => {\n  const API_KEY = \"YOUR_GOOGLE_CALENDAR_API_KEY\";\n  const BASIC_CALENDAR_ID = \"your-basic-calendar-id\";\n  const MAJOR_CALENDAR_ID = \"your-major-calendar-id\";\n  const now = new Date();\n\n  // Define time range\n  const timeMin = past ? new Date(now.setDate(now.getDate() - 60)).toISOString() : new Date().toISOString();\n  const timeMax = past ? new Date().toISOString() : new Date(now.setDate(now.getDate() + (past ? 0 : 60))).toISOString();\n  const orderBy = past ? \"startTime\" : \"startTime\";\n  const urlParams = (calendarId, timeMin, timeMax) => `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${API_KEY}&timeMin=${timeMin}&timeMax=${timeMax}&singleEvents=true&orderBy=${orderBy}`;\n  const urlBasic = urlParams(BASIC_CALENDAR_ID, timeMin, timeMax);\n  const urlMajor = urlParams(MAJOR_CALENDAR_ID, timeMin, timeMax);\n  try {\n    const [responseBasic, responseMajor] = await Promise.all([fetch(urlBasic), fetch(urlMajor)]);\n    const [dataBasic, dataMajor] = await Promise.all([responseBasic.json(), responseMajor.json()]);\n    let combinedEvents = [...(dataBasic.items || []), ...(dataMajor.items || [])];\n\n    // Sort by date — ascending for upcoming, descending for past\n    combinedEvents.sort((a, b) => {\n      const dateA = new Date(a.start.dateTime || a.start.date).getTime();\n      const dateB = new Date(b.start.dateTime || b.start.date).getTime();\n      return past ? dateB - dateA : dateA - dateB;\n    });\n    return combinedEvents;\n  } catch (error) {\n    console.error(\"Error fetching events:\", error);\n    return [];\n  }\n};\nexport default fetchEvents;","map":{"version":3,"names":["fetchEvents","past","API_KEY","BASIC_CALENDAR_ID","MAJOR_CALENDAR_ID","now","Date","timeMin","setDate","getDate","toISOString","timeMax","orderBy","urlParams","calendarId","urlBasic","urlMajor","responseBasic","responseMajor","Promise","all","fetch","dataBasic","dataMajor","json","combinedEvents","items","sort","a","b","dateA","start","dateTime","date","getTime","dateB","error","console"],"sources":["/home/everett/acm-website/src/components/fetchEvents.js"],"sourcesContent":["const fetchEvents = async (past = false) => {\n    const API_KEY = \"YOUR_GOOGLE_CALENDAR_API_KEY\";\n    const BASIC_CALENDAR_ID = \"your-basic-calendar-id\";\n    const MAJOR_CALENDAR_ID = \"your-major-calendar-id\";\n  \n    const now = new Date();\n  \n    // Define time range\n    const timeMin = past ? new Date(now.setDate(now.getDate() - 60)).toISOString() : new Date().toISOString();\n    const timeMax = past ? new Date().toISOString() : new Date(now.setDate(now.getDate() + (past ? 0 : 60))).toISOString();\n  \n    const orderBy = past ? \"startTime\" : \"startTime\";\n  \n    const urlParams = (calendarId, timeMin, timeMax) =>\n      `https://www.googleapis.com/calendar/v3/calendars/${calendarId}/events?key=${API_KEY}&timeMin=${timeMin}&timeMax=${timeMax}&singleEvents=true&orderBy=${orderBy}`;\n  \n    const urlBasic = urlParams(BASIC_CALENDAR_ID, timeMin, timeMax);\n    const urlMajor = urlParams(MAJOR_CALENDAR_ID, timeMin, timeMax);\n  \n    try {\n      const [responseBasic, responseMajor] = await Promise.all([fetch(urlBasic), fetch(urlMajor)]);\n      const [dataBasic, dataMajor] = await Promise.all([responseBasic.json(), responseMajor.json()]);\n  \n      let combinedEvents = [...(dataBasic.items || []), ...(dataMajor.items || [])];\n  \n      // Sort by date — ascending for upcoming, descending for past\n      combinedEvents.sort((a, b) => {\n        const dateA = new Date(a.start.dateTime || a.start.date).getTime();\n        const dateB = new Date(b.start.dateTime || b.start.date).getTime();\n        return past ? dateB - dateA : dateA - dateB;\n      });\n  \n      return combinedEvents;\n    } catch (error) {\n      console.error(\"Error fetching events:\", error);\n      return [];\n    }\n  };\n  \n\nexport default fetchEvents;"],"mappings":"AAAA,MAAMA,WAAW,GAAG,MAAAA,CAAOC,IAAI,GAAG,KAAK,KAAK;EACxC,MAAMC,OAAO,GAAG,8BAA8B;EAC9C,MAAMC,iBAAiB,GAAG,wBAAwB;EAClD,MAAMC,iBAAiB,GAAG,wBAAwB;EAElD,MAAMC,GAAG,GAAG,IAAIC,IAAI,CAAC,CAAC;;EAEtB;EACA,MAAMC,OAAO,GAAGN,IAAI,GAAG,IAAIK,IAAI,CAACD,GAAG,CAACG,OAAO,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,IAAIJ,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;EACzG,MAAMC,OAAO,GAAGV,IAAI,GAAG,IAAIK,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,GAAG,IAAIJ,IAAI,CAACD,GAAG,CAACG,OAAO,CAACH,GAAG,CAACI,OAAO,CAAC,CAAC,IAAIR,IAAI,GAAG,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAACS,WAAW,CAAC,CAAC;EAEtH,MAAME,OAAO,GAAGX,IAAI,GAAG,WAAW,GAAG,WAAW;EAEhD,MAAMY,SAAS,GAAGA,CAACC,UAAU,EAAEP,OAAO,EAAEI,OAAO,KAC7C,oDAAoDG,UAAU,eAAeZ,OAAO,YAAYK,OAAO,YAAYI,OAAO,8BAA8BC,OAAO,EAAE;EAEnK,MAAMG,QAAQ,GAAGF,SAAS,CAACV,iBAAiB,EAAEI,OAAO,EAAEI,OAAO,CAAC;EAC/D,MAAMK,QAAQ,GAAGH,SAAS,CAACT,iBAAiB,EAAEG,OAAO,EAAEI,OAAO,CAAC;EAE/D,IAAI;IACF,MAAM,CAACM,aAAa,EAAEC,aAAa,CAAC,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC,CAACC,KAAK,CAACN,QAAQ,CAAC,EAAEM,KAAK,CAACL,QAAQ,CAAC,CAAC,CAAC;IAC5F,MAAM,CAACM,SAAS,EAAEC,SAAS,CAAC,GAAG,MAAMJ,OAAO,CAACC,GAAG,CAAC,CAACH,aAAa,CAACO,IAAI,CAAC,CAAC,EAAEN,aAAa,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;IAE9F,IAAIC,cAAc,GAAG,CAAC,IAAIH,SAAS,CAACI,KAAK,IAAI,EAAE,CAAC,EAAE,IAAIH,SAAS,CAACG,KAAK,IAAI,EAAE,CAAC,CAAC;;IAE7E;IACAD,cAAc,CAACE,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5B,MAAMC,KAAK,GAAG,IAAIxB,IAAI,CAACsB,CAAC,CAACG,KAAK,CAACC,QAAQ,IAAIJ,CAAC,CAACG,KAAK,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;MAClE,MAAMC,KAAK,GAAG,IAAI7B,IAAI,CAACuB,CAAC,CAACE,KAAK,CAACC,QAAQ,IAAIH,CAAC,CAACE,KAAK,CAACE,IAAI,CAAC,CAACC,OAAO,CAAC,CAAC;MAClE,OAAOjC,IAAI,GAAGkC,KAAK,GAAGL,KAAK,GAAGA,KAAK,GAAGK,KAAK;IAC7C,CAAC,CAAC;IAEF,OAAOV,cAAc;EACvB,CAAC,CAAC,OAAOW,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAC9C,OAAO,EAAE;EACX;AACF,CAAC;AAGH,eAAepC,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}