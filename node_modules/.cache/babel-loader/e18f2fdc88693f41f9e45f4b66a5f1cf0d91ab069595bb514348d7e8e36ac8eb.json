{"ast":null,"code":"var _jsxFileName = \"C:\\\\ACM_Website\\\\src\\\\components\\\\hackathon_nov2025\\\\BackgroundFX.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useMemo, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BackgroundFX({\n  images,\n  interval = 3000,\n  fade = 2000\n}) {\n  _s();\n  const [index, setIndex] = useState(0);\n  const [loaded, setLoaded] = useState(() => images.map(() => false));\n  const timerRef = useRef(null);\n\n  // Preload all images once\n  useEffect(() => {\n    let mounted = true;\n    images.forEach((src, i) => {\n      const img = new Image();\n      img.onload = () => mounted && setLoaded(prev => {\n        const next = [...prev];\n        next[i] = true;\n        return next;\n      });\n      img.onerror = img.onload; // treat error as loaded to avoid stalling\n      img.src = src;\n    });\n    return () => {\n      mounted = false;\n    };\n  }, [images]);\n\n  // Only advance to the next image if it's loaded\n  useEffect(() => {\n    clearInterval(timerRef.current);\n    timerRef.current = setInterval(() => {\n      const next = (index + 1) % images.length;\n      if (loaded[next]) {\n        setIndex(next);\n      }\n      // if not loaded yet, skip this tick; we'll try again next interval\n    }, interval);\n    return () => clearInterval(timerRef.current);\n  }, [index, images.length, interval, loaded]);\n\n  // Optional: start at the first loaded image to avoid initial flash\n  const initialIndex = useMemo(() => loaded.findIndex(Boolean), [loaded]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 z-[0] pointer-events-none bg-black\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), images.map((src, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `absolute inset-0 bg-cover bg-center ${\n      // If nothing loaded yet, show nothing; once at least one is loaded,\n      // show the chosen index.\n      loaded[i] && (i === index || initialIndex === i && !loaded[index]) ? \"opacity-100\" : \"opacity-0\"}`,\n      style: {\n        backgroundImage: `url(${src})`,\n        transition: `opacity ${fade}ms ease-in-out`,\n        willChange: \"opacity\"\n      }\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 bg-black/50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(BackgroundFX, \"ipVbOqvH8gp2wDCrxTJ6m8l+SYA=\");\n_c = BackgroundFX;\nvar _c;\n$RefreshReg$(_c, \"BackgroundFX\");","map":{"version":3,"names":["useEffect","useMemo","useRef","useState","jsxDEV","_jsxDEV","BackgroundFX","images","interval","fade","_s","index","setIndex","loaded","setLoaded","map","timerRef","mounted","forEach","src","i","img","Image","onload","prev","next","onerror","clearInterval","current","setInterval","length","initialIndex","findIndex","Boolean","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","backgroundImage","transition","willChange","_c","$RefreshReg$"],"sources":["C:/ACM_Website/src/components/hackathon_nov2025/BackgroundFX.js"],"sourcesContent":["import { useEffect, useMemo, useRef, useState } from \"react\";\r\n\r\nexport default function BackgroundFX({ images, interval = 3000, fade = 2000 }) {\r\n  const [index, setIndex] = useState(0);\r\n  const [loaded, setLoaded] = useState(() => images.map(() => false));\r\n  const timerRef = useRef(null);\r\n\r\n  // Preload all images once\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    images.forEach((src, i) => {\r\n      const img = new Image();\r\n      img.onload = () => mounted && setLoaded(prev => {\r\n        const next = [...prev];\r\n        next[i] = true;\r\n        return next;\r\n      });\r\n      img.onerror = img.onload; // treat error as loaded to avoid stalling\r\n      img.src = src;\r\n    });\r\n    return () => { mounted = false; };\r\n  }, [images]);\r\n\r\n  // Only advance to the next image if it's loaded\r\n  useEffect(() => {\r\n    clearInterval(timerRef.current);\r\n    timerRef.current = setInterval(() => {\r\n      const next = (index + 1) % images.length;\r\n      if (loaded[next]) {\r\n        setIndex(next);\r\n      }\r\n      // if not loaded yet, skip this tick; we'll try again next interval\r\n    }, interval);\r\n    return () => clearInterval(timerRef.current);\r\n  }, [index, images.length, interval, loaded]);\r\n\r\n  // Optional: start at the first loaded image to avoid initial flash\r\n  const initialIndex = useMemo(() => loaded.findIndex(Boolean), [loaded]);\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 z-[0] pointer-events-none bg-black\">\r\n      {/* solid black base prevents any white flash */}\r\n      <div className=\"absolute inset-0 bg-black\" />\r\n\r\n      {images.map((src, i) => (\r\n        <div\r\n          key={i}\r\n          className={`absolute inset-0 bg-cover bg-center ${\r\n            // If nothing loaded yet, show nothing; once at least one is loaded,\r\n            // show the chosen index.\r\n            (loaded[i] && (i === index || (initialIndex === i && !loaded[index])))\r\n              ? \"opacity-100\"\r\n              : \"opacity-0\"\r\n          }`}\r\n          style={{\r\n            backgroundImage: `url(${src})`,\r\n            transition: `opacity ${fade}ms ease-in-out`,\r\n            willChange: \"opacity\",\r\n          }}\r\n        />\r\n      ))}\r\n\r\n      {/* readability overlay (keeps the vibe dark) */}\r\n      <div className=\"absolute inset-0 bg-black/50\" />\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}